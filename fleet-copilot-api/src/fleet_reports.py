"""
Copiloto Inteligente de Gest√£o de Frotas
Sistema de Exporta√ß√£o de Relat√≥rios
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import json
import logging
import base64
import io
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.chart import BarChart, PieChart, LineChart, Reference
from openpyxl.drawing.image import Image as OpenpyxlImage
import tempfile
import os

logger = logging.getLogger(__name__)

class FleetReportGenerator:
    """Gerador de relat√≥rios para gest√£o de frotas"""
    
    def __init__(self, data_processor, visualization_engine, insights_engine):
        self.data_processor = data_processor
        self.visualization_engine = visualization_engine
        self.insights_engine = insights_engine
        
        # Estilos para Excel
        self.excel_styles = {
            'header': Font(bold=True, color='FFFFFF'),
            'header_fill': PatternFill(start_color='2E86AB', end_color='2E86AB', fill_type='solid'),
            'subheader': Font(bold=True, color='2E86AB'),
            'normal': Font(color='000000'),
            'warning': Font(color='C73E1D'),
            'success': Font(color='28A745'),
            'center': Alignment(horizontal='center', vertical='center'),
            'border': Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
        }
    
    def generate_comprehensive_report(self, enterprise_id: str = None, days: int = 30, 
                                    format_type: str = 'both') -> Dict[str, str]:
        """Gera relat√≥rio abrangente em PDF e/ou Excel"""
        logger.info(f"Gerando relat√≥rio abrangente para os √∫ltimos {days} dias")
        
        # Obter dados e an√°lises
        analysis = self.insights_engine.generate_comprehensive_analysis(enterprise_id, days)
        summary = self.data_processor.get_checklist_summary(enterprise_id, days)
        vehicle_perf = self.data_processor.get_vehicle_performance(enterprise_id, days)
        driver_perf = self.data_processor.get_driver_performance(enterprise_id, days)
        
        # Gerar visualiza√ß√µes
        charts = self._generate_report_charts(enterprise_id, days)
        
        report_files = {}
        
        if format_type in ['pdf', 'both']:
            pdf_file = self._generate_pdf_report(analysis, summary, vehicle_perf, driver_perf, charts, days)
            report_files['pdf'] = pdf_file
        
        if format_type in ['excel', 'both']:
            excel_file = self._generate_excel_report(analysis, summary, vehicle_perf, driver_perf, charts, days)
            report_files['excel'] = excel_file
        
        return report_files
    
    def _generate_report_charts(self, enterprise_id: str, days: int) -> Dict[str, str]:
        """Gera gr√°ficos para o relat√≥rio"""
        charts = {}
        
        try:
            # Gr√°fico de resumo
            charts['summary'] = self.visualization_engine.create_checklist_summary_chart(enterprise_id, days)
            
            # Gr√°fico de performance de ve√≠culos
            charts['vehicles'] = self.visualization_engine.create_vehicle_performance_chart(enterprise_id, days)
            
            # Gr√°fico de performance de motoristas
            charts['drivers'] = self.visualization_engine.create_driver_performance_chart(enterprise_id, days)
            
            # Gr√°fico de timeline
            charts['timeline'] = self.visualization_engine.create_timeline_chart(enterprise_id, days)
            
        except Exception as e:
            logger.warning(f"Erro ao gerar gr√°ficos: {e}")
        
        return charts
    
    def _generate_pdf_report(self, analysis: Dict, summary: Dict, vehicle_perf: pd.DataFrame, 
                           driver_perf: pd.DataFrame, charts: Dict, days: int) -> str:
        """Gera relat√≥rio em PDF usando Markdown"""
        
        # Criar conte√∫do Markdown
        markdown_content = self._create_markdown_report(analysis, summary, vehicle_perf, driver_perf, charts, days)
        
        # Salvar arquivo Markdown
        md_file = f"/home/ubuntu/fleet_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        # Converter para PDF usando utilit√°rio
        pdf_file = md_file.replace('.md', '.pdf')
        
        try:
            import subprocess
            result = subprocess.run(['manus-md-to-pdf', md_file, pdf_file], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                logger.info(f"Relat√≥rio PDF gerado: {pdf_file}")
                return pdf_file
            else:
                logger.error(f"Erro ao converter para PDF: {result.stderr}")
                return md_file  # Retorna o Markdown se n√£o conseguir converter
        except Exception as e:
            logger.error(f"Erro ao executar convers√£o para PDF: {e}")
            return md_file
    
    def _create_markdown_report(self, analysis: Dict, summary: Dict, vehicle_perf: pd.DataFrame, 
                              driver_perf: pd.DataFrame, charts: Dict, days: int) -> str:
        """Cria conte√∫do do relat√≥rio em Markdown"""
        
        content = []
        
        # Cabe√ßalho
        content.append("# Relat√≥rio de Gest√£o de Frotas")
        content.append(f"**Per√≠odo:** {days} dias")
        content.append(f"**Gerado em:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")
        content.append("---")
        content.append("")
        
        # Resumo Executivo
        content.append("## Resumo Executivo")
        content.append("")
        natural_summary = self.insights_engine.generate_natural_language_summary(analysis)
        content.append(natural_summary)
        content.append("")
        
        # M√©tricas Principais
        content.append("## M√©tricas Principais")
        content.append("")
        content.append("| M√©trica | Valor |")
        content.append("|---------|-------|")
        content.append(f"| Total de Verifica√ß√µes | {summary['total']} |")
        content.append(f"| Taxa de Conformidade | {summary['compliance_rate']}% |")
        content.append(f"| Ve√≠culos Monitorados | {summary['vehicles']} |")
        content.append(f"| Motoristas Ativos | {summary['drivers']} |")
        content.append(f"| Verifica√ß√µes Conformes | {summary['compliant']} |")
        content.append(f"| N√£o Conformidades | {summary['non_compliant']} |")
        content.append("")
        
        # Insights Principais
        content.append("## Insights Principais")
        content.append("")
        
        # Agrupar insights por prioridade
        all_insights = []
        for category in ['summary', 'vehicle_insights', 'driver_insights', 'maintenance_insights', 'safety_insights']:
            if category in analysis and 'insights' in analysis[category]:
                all_insights.extend(analysis[category]['insights'])
        
        high_priority = [i for i in all_insights if i['priority'] == 'high']
        medium_priority = [i for i in all_insights if i['priority'] == 'medium']
        
        if high_priority:
            content.append("### üî¥ Alta Prioridade")
            for insight in high_priority:
                content.append(f"- **{insight['title']}**: {insight['description']}")
                content.append(f"  - *Recomenda√ß√£o*: {insight['recommendation']}")
            content.append("")
        
        if medium_priority:
            content.append("### üü° M√©dia Prioridade")
            for insight in medium_priority:
                content.append(f"- **{insight['title']}**: {insight['description']}")
                content.append(f"  - *Recomenda√ß√£o*: {insight['recommendation']}")
            content.append("")
        
        # Performance de Ve√≠culos
        content.append("## Performance de Ve√≠culos")
        content.append("")
        
        if not vehicle_perf.empty:
            content.append("### Top 5 Ve√≠culos por Conformidade")
            content.append("")
            content.append("| Ve√≠culo | Taxa de Conformidade | Total de Verifica√ß√µes | √öltima Verifica√ß√£o |")
            content.append("|---------|---------------------|----------------------|-------------------|")
            
            for _, row in vehicle_perf.head(5).iterrows():
                last_check = pd.to_datetime(row['last_check']).strftime('%d/%m/%Y')
                content.append(f"| {row['vehicle_plate']} | {row['compliance_rate']}% | {row['total_checks']} | {last_check} |")
            content.append("")
        
        # Performance de Motoristas
        content.append("## Performance de Motoristas")
        content.append("")
        
        if not driver_perf.empty:
            content.append("### Top 5 Motoristas por Conformidade")
            content.append("")
            content.append("| Motorista | Taxa de Conformidade | Total de Verifica√ß√µes | Ve√≠culos Operados |")
            content.append("|-----------|---------------------|----------------------|------------------|")
            
            for _, row in driver_perf.head(5).iterrows():
                content.append(f"| {row['driver_name']} | {row['compliance_rate']}% | {row['total_checks']} | {row['vehicles_operated']} |")
            content.append("")
        
        # Alertas
        if analysis['alerts']:
            content.append("## Alertas Ativos")
            content.append("")
            for alert in analysis['alerts']:
                severity_icon = "üî¥" if alert['severity'] == 'critical' else "üü°"
                content.append(f"{severity_icon} **{alert['title']}**: {alert['message']}")
            content.append("")
        
        # Recomenda√ß√µes
        if analysis['recommendations']:
            content.append("## Recomenda√ß√µes Estrat√©gicas")
            content.append("")
            for i, rec in enumerate(analysis['recommendations'], 1):
                priority_icon = "üî¥" if rec['priority'] == 'high' else "üü°" if rec['priority'] == 'medium' else "üü¢"
                content.append(f"{i}. {priority_icon} **{rec['title']}**")
                content.append(f"   - {rec['description']}")
                content.append(f"   - *Impacto Estimado*: {rec['estimated_impact']}")
                content.append(f"   - *Prazo*: {rec['timeline']}")
                content.append("")
        
        # Tend√™ncias
        if analysis['trends']['trends']:
            content.append("## An√°lise de Tend√™ncias")
            content.append("")
            for trend in analysis['trends']['trends']:
                direction_icon = "üìà" if trend['direction'] == "melhorando" else "üìâ"
                content.append(f"{direction_icon} **{trend['metric']}**: {trend['description']}")
            content.append("")
        
        # Rodap√©
        content.append("---")
        content.append("*Relat√≥rio gerado automaticamente pelo Copiloto Inteligente de Gest√£o de Frotas*")
        
        return "\n".join(content)
    
    def _generate_excel_report(self, analysis: Dict, summary: Dict, vehicle_perf: pd.DataFrame, 
                             driver_perf: pd.DataFrame, charts: Dict, days: int) -> str:
        """Gera relat√≥rio em Excel"""
        
        excel_file = f"/home/ubuntu/fleet_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
            
            # Aba 1: Resumo
            self._create_summary_sheet(writer, analysis, summary, days)
            
            # Aba 2: Performance de Ve√≠culos
            if not vehicle_perf.empty:
                self._create_vehicles_sheet(writer, vehicle_perf)
            
            # Aba 3: Performance de Motoristas
            if not driver_perf.empty:
                self._create_drivers_sheet(writer, driver_perf)
            
            # Aba 4: Insights e Alertas
            self._create_insights_sheet(writer, analysis)
            
            # Aba 5: Dados Brutos
            self._create_raw_data_sheet(writer, analysis, summary, days)
        
        logger.info(f"Relat√≥rio Excel gerado: {excel_file}")
        return excel_file
    
    def _create_summary_sheet(self, writer, analysis: Dict, summary: Dict, days: int):
        """Cria aba de resumo no Excel"""
        
        # Criar DataFrame com m√©tricas principais
        metrics_data = [
            ['M√©trica', 'Valor'],
            ['Per√≠odo Analisado', f'{days} dias'],
            ['Total de Verifica√ß√µes', summary['total']],
            ['Taxa de Conformidade', f"{summary['compliance_rate']}%"],
            ['Ve√≠culos Monitorados', summary['vehicles']],
            ['Motoristas Ativos', summary['drivers']],
            ['Verifica√ß√µes Conformes', summary['compliant']],
            ['N√£o Conformidades', summary['non_compliant']],
            ['Data de Gera√ß√£o', datetime.now().strftime('%d/%m/%Y %H:%M')]
        ]
        
        df_metrics = pd.DataFrame(metrics_data[1:], columns=metrics_data[0])
        df_metrics.to_excel(writer, sheet_name='Resumo', index=False, startrow=2)
        
        # Aplicar formata√ß√£o
        worksheet = writer.sheets['Resumo']
        
        # T√≠tulo
        worksheet['A1'] = 'Relat√≥rio de Gest√£o de Frotas'
        worksheet['A1'].font = Font(size=16, bold=True, color='2E86AB')
        
        # Formatar cabe√ßalhos
        for col in ['A', 'B']:
            cell = worksheet[f'{col}3']
            cell.font = self.excel_styles['header']
            cell.fill = self.excel_styles['header_fill']
            cell.alignment = self.excel_styles['center']
        
        # Ajustar largura das colunas
        worksheet.column_dimensions['A'].width = 25
        worksheet.column_dimensions['B'].width = 20
    
    def _create_vehicles_sheet(self, writer, vehicle_perf: pd.DataFrame):
        """Cria aba de performance de ve√≠culos"""
        
        # Renomear colunas para portugu√™s e tratar timezone
        vehicle_perf_pt = vehicle_perf.copy()
        
        # Remover timezone se existir
        if 'last_check' in vehicle_perf_pt.columns:
            vehicle_perf_pt['last_check'] = pd.to_datetime(vehicle_perf_pt['last_check']).dt.tz_localize(None)
        
        vehicle_perf_pt.columns = [
            'Placa do Ve√≠culo', 'Total de Verifica√ß√µes', 'Taxa de Conformidade (%)',
            'Temperatura M√©dia (¬∞C)', 'Umidade M√©dia (%)', 'Dist√¢ncia Total (m)',
            '√öltima Verifica√ß√£o'
        ]
        
        vehicle_perf_pt.to_excel(writer, sheet_name='Ve√≠culos', index=False, startrow=1)
        
        worksheet = writer.sheets['Ve√≠culos']
        
        # T√≠tulo
        worksheet['A1'] = 'Performance de Ve√≠culos'
        worksheet['A1'].font = Font(size=14, bold=True, color='2E86AB')
        
        # Formatar cabe√ßalhos
        for col_num, col_letter in enumerate(['A', 'B', 'C', 'D', 'E', 'F', 'G'], 1):
            cell = worksheet[f'{col_letter}2']
            cell.font = self.excel_styles['header']
            cell.fill = self.excel_styles['header_fill']
            cell.alignment = self.excel_styles['center']
        
        # Ajustar largura das colunas
        column_widths = [15, 20, 25, 20, 18, 18, 20]
        for i, width in enumerate(column_widths):
            worksheet.column_dimensions[chr(65 + i)].width = width
    
    def _create_drivers_sheet(self, writer, driver_perf: pd.DataFrame):
        """Cria aba de performance de motoristas"""
        
        # Renomear colunas para portugu√™s e tratar timezone
        driver_perf_pt = driver_perf.copy()
        
        # Remover timezone se existir
        if 'last_activity' in driver_perf_pt.columns:
            driver_perf_pt['last_activity'] = pd.to_datetime(driver_perf_pt['last_activity']).dt.tz_localize(None)
        
        driver_perf_pt.columns = [
            'Nome do Motorista', 'Total de Verifica√ß√µes', 'Taxa de Conformidade (%)',
            'Ve√≠culos Operados', '√öltima Atividade'
        ]
        
        driver_perf_pt.to_excel(writer, sheet_name='Motoristas', index=False, startrow=1)
        
        worksheet = writer.sheets['Motoristas']
        
        # T√≠tulo
        worksheet['A1'] = 'Performance de Motoristas'
        worksheet['A1'].font = Font(size=14, bold=True, color='2E86AB')
        
        # Formatar cabe√ßalhos
        for col_letter in ['A', 'B', 'C', 'D', 'E']:
            cell = worksheet[f'{col_letter}2']
            cell.font = self.excel_styles['header']
            cell.fill = self.excel_styles['header_fill']
            cell.alignment = self.excel_styles['center']
        
        # Ajustar largura das colunas
        column_widths = [25, 20, 25, 18, 20]
        for i, width in enumerate(column_widths):
            worksheet.column_dimensions[chr(65 + i)].width = width
    
    def _create_insights_sheet(self, writer, analysis: Dict):
        """Cria aba de insights e alertas"""
        
        insights_data = []
        
        # Coletar todos os insights
        all_insights = []
        for category in ['summary', 'vehicle_insights', 'driver_insights', 'maintenance_insights', 'safety_insights']:
            if category in analysis and 'insights' in analysis[category]:
                all_insights.extend(analysis[category]['insights'])
        
        # Preparar dados para Excel
        for insight in all_insights:
            priority_icon = "üî¥" if insight['priority'] == 'high' else "üü°" if insight['priority'] == 'medium' else "üü¢"
            impact_icon = "‚úÖ" if insight['impact'] == 'positive' else "‚ùå" if insight['impact'] == 'negative' else "‚ûñ"
            
            insights_data.append([
                f"{priority_icon} {insight['priority'].upper()}",
                insight['category'].title(),
                insight['title'],
                insight['description'],
                insight['recommendation'],
                f"{impact_icon} {insight['impact'].title()}"
            ])
        
        if insights_data:
            df_insights = pd.DataFrame(insights_data, columns=[
                'Prioridade', 'Categoria', 'T√≠tulo', 'Descri√ß√£o', 'Recomenda√ß√£o', 'Impacto'
            ])
            df_insights.to_excel(writer, sheet_name='Insights', index=False, startrow=1)
            
            worksheet = writer.sheets['Insights']
            
            # T√≠tulo
            worksheet['A1'] = 'Insights e Recomenda√ß√µes'
            worksheet['A1'].font = Font(size=14, bold=True, color='2E86AB')
            
            # Formatar cabe√ßalhos
            for col_letter in ['A', 'B', 'C', 'D', 'E', 'F']:
                cell = worksheet[f'{col_letter}2']
                cell.font = self.excel_styles['header']
                cell.fill = self.excel_styles['header_fill']
                cell.alignment = self.excel_styles['center']
            
            # Ajustar largura das colunas
            column_widths = [15, 15, 25, 40, 40, 15]
            for i, width in enumerate(column_widths):
                worksheet.column_dimensions[chr(65 + i)].width = width
    
    def _create_raw_data_sheet(self, writer, analysis: Dict, summary: Dict, days: int):
        """Cria aba com dados brutos em JSON"""
        
        # Converter an√°lise para formato tabular
        raw_data = [
            ['Se√ß√£o', 'Dados JSON'],
            ['Resumo', json.dumps(summary, indent=2, ensure_ascii=False)],
            ['An√°lise Completa', json.dumps(analysis, indent=2, ensure_ascii=False, default=str)]
        ]
        
        df_raw = pd.DataFrame(raw_data[1:], columns=raw_data[0])
        df_raw.to_excel(writer, sheet_name='Dados Brutos', index=False, startrow=1)
        
        worksheet = writer.sheets['Dados Brutos']
        
        # T√≠tulo
        worksheet['A1'] = 'Dados Brutos (JSON)'
        worksheet['A1'].font = Font(size=14, bold=True, color='2E86AB')
        
        # Ajustar largura das colunas
        worksheet.column_dimensions['A'].width = 20
        worksheet.column_dimensions['B'].width = 100
    
    def generate_quick_summary_excel(self, enterprise_id: str = None, days: int = 7) -> str:
        """Gera planilha Excel com resumo r√°pido"""
        
        summary = self.data_processor.get_checklist_summary(enterprise_id, days)
        vehicle_perf = self.data_processor.get_vehicle_performance(enterprise_id, days)
        
        excel_file = f"/home/ubuntu/fleet_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
            
            # Resumo r√°pido
            summary_data = pd.DataFrame([
                ['Total de Verifica√ß√µes', summary['total']],
                ['Taxa de Conformidade', f"{summary['compliance_rate']}%"],
                ['Ve√≠culos', summary['vehicles']],
                ['Motoristas', summary['drivers']]
            ], columns=['M√©trica', 'Valor'])
            
            summary_data.to_excel(writer, sheet_name='Resumo', index=False)
            
            # Performance de ve√≠culos (se dispon√≠vel)
            if not vehicle_perf.empty:
                vehicle_perf.to_excel(writer, sheet_name='Ve√≠culos', index=False)
        
        logger.info(f"Resumo Excel gerado: {excel_file}")
        return excel_file

if __name__ == "__main__":
    # Teste do sistema de relat√≥rios
    from fleet_data_connector import FleetDataConnector, FleetDataProcessor
    from fleet_visualization import FleetVisualizationEngine
    from fleet_insights import FleetInsightsEngine
    
    connector = FleetDataConnector()
    processor = FleetDataProcessor(connector)
    viz_engine = FleetVisualizationEngine(processor)
    insights_engine = FleetInsightsEngine(processor)
    report_generator = FleetReportGenerator(processor, viz_engine, insights_engine)
    
    print("Gerando relat√≥rios de teste...")
    
    try:
        # Gerar relat√≥rio completo
        reports = report_generator.generate_comprehensive_report(days=30, format_type='both')
        
        print("‚úì Relat√≥rios gerados:")
        for format_type, filepath in reports.items():
            print(f"  - {format_type.upper()}: {filepath}")
        
        # Gerar resumo r√°pido
        quick_excel = report_generator.generate_quick_summary_excel(days=7)
        print(f"‚úì Resumo r√°pido: {quick_excel}")
        
    except Exception as e:
        print(f"Erro ao gerar relat√≥rios: {e}")

